<?xml version="1.0"?>

<!-- ================================================================ -->
<!-- Whole Brain Catalog Client build file for ant (build.xml)                       -->
<!-- ================================================================ -->


<project name="BrainCatalog" default="usage" basedir=".">

    <property environment="env"/>
    <!-- <property name="catalog.home" location="${env.CATALOG_HOME}"/> -->
	<property name="catalog.home" location="."/>

    <property file = "local.properties"/>  

    <property name = "src" value = "./src"/>
    <property name = "lib" value = "./lib"/>
    <property name = "build" value = "./build"/>
    <property name = "classes" value = "${build}/classes"/>
    <property name = "dist" value = "${build}/dist"/>
    <property name = "etc" value = "./etc"/>
	
    <property name = "jarfile" value = "${dist}/${pluginName}.jar"/>


    <property name = "debug" value = "on"/>
    <property name = "source" value = "1.6"/>
    <property name = "deprecation" value = "off"/>

    <!-- <property name = "junit" value = "./junit"/>-->

	<path id = "project.classpath">    
		
		<!-- *********************************************  -->
		<!-- DEFINES WHERE TO LOOK FOR THE COMPILED CLASSES -->
		<!-- IF YOU WANT IT TO COMPILE CLASSES IN YOUR IDE, -->
		<!--          MODIFY ACCORDINGLY                    -->
		<!-- *********************************************  -->
		<pathelement path="${classes}"/>
		
		<!-- Protege Libraries -->
        <pathelement path="${lib}/protege-libs/antlr-2.7.5.jar"/>
        <pathelement path="${lib}/protege-libs/arq.jar"/>
        <pathelement path="${lib}/protege-libs/arq-extra.jar"/>
        <pathelement path="${lib}/protege-libs/commons-lang-2.0.jar"/>
        <pathelement path="${lib}/protege-libs/commons-logging-1.1.jar"/>
        <pathelement path="${lib}/protege-libs/concurrent.jar"/>
        <pathelement path="${lib}/protege-libs/edtftpj-1.5.2.jar"/>
        <pathelement path="${lib}/protege-libs/ekitspell.jar"/>
        <pathelement path="${lib}/protege-libs/icu4j_3_4.jar"/>
        <pathelement path="${lib}/protege-libs/iri.jar"/>
        <pathelement path="${lib}/protege-libs/jcalendar.jar"/>
        <pathelement path="${lib}/protege-libs/jdom.jar"/>
        <pathelement path="${lib}/protege-libs/jena.jar"/>
        <pathelement path="${lib}/protege-libs/jep-2.4.0.jar"/>
        <pathelement path="${lib}/protege-libs/json.jar"/>
        <pathelement path="${lib}/protege-libs/kazuki.jar"/>
        <pathelement path="${lib}/protege-libs/lax.jar"/>
        <pathelement path="${lib}/protege-libs/log4j-1.2.12.jar"/>
        <pathelement path="${lib}/protege-libs/looks-2.1.3.jar"/>
        <pathelement path="${lib}/protege-libs/lucene-core-2.0.0.jar"/>
        <pathelement path="${lib}/protege-libs/owlsyntax.jar"/>
    	<pathelement path="${lib}/protege-libs/protege.jar"/>
        <pathelement path="${lib}/protege-libs/protege-owl.jar"/>
        <pathelement path="${lib}/protege-libs/stax-api-1.0.jar"/>
        <pathelement path="${lib}/protege-libs/unicode_panel.jar"/>
        <pathelement path="${lib}/protege-libs/wstx-asl-3.0.0.jar"/>
    	
    	<!-- JME Libraries -->
        <pathelement path="${lib}/jinput.jar"/>
        <pathelement path="${lib}/jme.jar"/>
        <pathelement path="${lib}/jme-audio.jar"/>
        <pathelement path="${lib}/jme-awt.jar"/>
        <pathelement path="${lib}/jme-collada.jar"/>
        <pathelement path="${lib}/jme-editors.jar"/>
        <pathelement path="${lib}/jme-effects.jar"/>
        <pathelement path="${lib}/jme-font.jar"/>
        <pathelement path="${lib}/jme-gamestates.jar"/>
        <pathelement path="${lib}/jme-model.jar"/>
        <pathelement path="${lib}/jme-scene.jar"/>
        <pathelement path="${lib}/jme-terrain.jar"/>
        <pathelement path="${lib}/jmetest.jar"/>
        <pathelement path="${lib}/jmetest-data-cursor.jar"/>
        <pathelement path="${lib}/jmetest-data-images.jar"/>
        <pathelement path="${lib}/jmetest-data-model.jar"/>
        <pathelement path="${lib}/jmetest-data-skybox1.jar"/>
        <pathelement path="${lib}/jmetest-data-sound.jar"/>
        <pathelement path="${lib}/jmetest-data-texture.jar"/>
        <pathelement path="${lib}/jme-xml.jar"/>
        <pathelement path="${lib}/jogg-0.0.7.jar"/>
        <pathelement path="${lib}/jorbis-0.0.15.jar"/>
        <pathelement path="${lib}/junit-4.1.jar"/>
    	
    	<!-- LWJGL Libraries -->
        <pathelement path="${lib}/lwjgl_fmod3.jar"/>
        <pathelement path="${lib}/lwjgl_util_applet.jar"/>
        <pathelement path="${lib}/lwjgl.jar"/>
    	
    	<!-- Xalan Libraries -->
        <pathelement path="${lib}/xalan-j_2_7_1/serializer.jar"/>
        <pathelement path="${lib}/xalan-j_2_7_1/xalan.jar"/>
        <pathelement path="${lib}/xalan-j_2_7_1/xercesImpl.jar"/>
        <pathelement path="${lib}/xalan-j_2_7_1/xml-apis.jar"/>
    	
    	<!-- PostGres JDBC Driver -->
        <pathelement path="${lib}/driver.jar"/>
    	
    	<!-- FengGUI Libraries-->
        <pathelement path="${lib}/FengGUI-modified.jar"/>
		
		<!-- CCDB Connection Libraries -->
        <pathelement path="${lib}/ccdb-plugin/BrainCatalogCCDBClientReader.jar"/>

        <pathelement path="${lib}/ccdb-plugin/ext-lib/BrainCatalogCCDB_datamodel.jar"/>
        <pathelement path="${lib}/ccdb-plugin/ext-lib/FastInfoset.jar"/>
        <pathelement path="${lib}/ccdb-plugin/ext-lib/http.jar"/>
        <pathelement path="${lib}/ccdb-plugin/ext-lib/jaxws-api.jar"/>
        <pathelement path="${lib}/ccdb-plugin/ext-lib/jaxws-rt.jar"/>
        <pathelement path="${lib}/ccdb-plugin/ext-lib/jaxws-tools.jar"/>
        <pathelement path="${lib}/ccdb-plugin/ext-lib/jsr173_api.jar"/>
        <pathelement path="${lib}/ccdb-plugin/ext-lib/jsr181-api.jar"/>
        <pathelement path="${lib}/ccdb-plugin/ext-lib/jsr250-api.jar"/>
        <pathelement path="${lib}/ccdb-plugin/ext-lib/saaj-impl.jar"/>
        <pathelement path="${lib}/ccdb-plugin/ext-lib/saaj-api.jar"/>
        <pathelement path="${lib}/ccdb-plugin/ext-lib/sjsxp.jar"/>
        <pathelement path="${lib}/ccdb-plugin/ext-lib/stax-ex.jar"/>
        <pathelement path="${lib}/ccdb-plugin/ext-lib/streambuffer.jar"/>

		<!-- JME Scene Monitor -->
        <pathelement path="${lib}/scenemonitor_jme1.jar"/>
        <pathelement path="${lib}/sm_properties_jme1.jar"/>
		
		<!-- Smart Atlas server connection Libraries -->

        <pathelement path="${lib}/spatialatlas-client.jar"/>
        <pathelement path="${lib}/axis-1_4/axis.jar"/>
        <pathelement path="${lib}/axis-1_4/jaxrpc.jar"/>
        <pathelement path="${lib}/axis-1_4/commons-discovery-0.2.jar"/>
        <pathelement path="${lib}/axis-1_4/commons-logging-1.0.4.jar"/>
		
		<!-- HyperJaxb2 Libraries -->

        <pathelement path="${lib}/hyperjaxb2/hyperjaxb2-core-0.6.2.jar"/>
        <pathelement path="${lib}/hyperjaxb2/hyperjaxb2-hibernate-configuration-0.6.2.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/hyperjaxb2-hibernate-customizations-0.6.2.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/hyperjaxb2-hibernate-mapping-0.6.2.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/hyperjaxb2-shared-0.6.2.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/hyperjaxb2-testing-0.6.2.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/asm-2.2.1.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/asm-attrs-2.2.1.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/cglib-2.2_beta1.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/commons-beanutils-1.7.0.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/commons-io-1.2.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/commons-lang-2.1.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/commons-logging-1.1.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/dom4j-1.6.1.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/ehcache-1.2.3.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/hibernate-3.2.2.ga.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/hsqldb-1.7.3.3.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/isorelax-20030108.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/jax-qname-1.1.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/jaxb-api-1.0.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/jaxb-impl-1.0.6.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/jaxb-libs-1.0.6.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/jaxb-xjc-1.0.6.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/jaxbcommons-core-1.0.3.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/jaxbcommons-shared-1.0.3.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/jaxbcommons-testing-1.0.3.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/jaxp-api-1.4.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/jaxp-ri-1.4.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/jta-1.0.1B.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/namespace-1.0.1.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/relaxngDatatype-20020414.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/saxon-8.7.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/saxon-dom-8.7.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/spring-2.0.2.jar"/>
	    <pathelement path="${lib}/hyperjaxb2/lib/xsdlib-20060615.jar"/>
		
		<!-- JAXB Libraries -->
				
				<pathelement path="etc/lib/jaxb/activation.jar"/>
				<pathelement path="etc/lib/jaxb/jaxb-xjc.jar"/>
				<pathelement path="etc/lib/jaxb/jaxb-impl.jar"/>
				<pathelement path="etc/lib/jaxb/jaxb1-impl.jar"/>
				<pathelement path="etc/lib/jaxb/jaxb-api.jar"/>
				<pathelement path="etc/lib/jaxb/jsr173_1.0_api.jar"/>
		
		<!-- Hibernate 2.1 Libraries -->
				
		<pathelement path="etc/lib/hibernate-2.1/hibernate2.jar"/>
			    <pathelement path="etc/lib/hibernate-2.1/lib/c3p0-0.8.4.5.jar"/>
			    <!--<pathelement path="etc/lib/hibernate-2.1/lib/cglib-full-2.0.2.jar"/>-->
			    <pathelement path="etc/lib/hibernate-2.1/lib/commons-collections-2.1.1.jar"/>
			    <pathelement path="etc/lib/hibernate-2.1/lib/commons-dbcp-1.2.1.jar"/>
			    <!--<pathelement path="etc/lib/hibernate-2.1/lib/commons-lang-1.0.1.jar"/>-->
			    <pathelement path="etc/lib/hibernate-2.1/lib/commons-pool-1.2.jar"/>
			    <pathelement path="etc/lib/hibernate-2.1/lib/connector.jar"/>
			    <!--<pathelement path="etc/lib/hibernate-2.1/lib/ehcache-0.9.jar"/>-->
			    <pathelement path="etc/lib/hibernate-2.1/lib/jaas.jar"/>
			    <pathelement path="etc/lib/hibernate-2.1/lib/jboss-cache.jar"/>
			    <pathelement path="etc/lib/hibernate-2.1/lib/jboss-common.jar"/>
			    <pathelement path="etc/lib/hibernate-2.1/lib/jboss-jmx.jar"/>
			    <pathelement path="etc/lib/hibernate-2.1/lib/jboss-system.jar"/>
			    <pathelement path="etc/lib/hibernate-2.1/lib/jcs-1.0-dev.jar"/>
			    <pathelement path="etc/lib/hibernate-2.1/lib/jdbc2_0-stdext.jar"/>
			    <pathelement path="etc/lib/hibernate-2.1/lib/jgroups-2.2.7.jar"/>
			    <pathelement path="etc/lib/hibernate-2.1/lib/jta.jar"/>
			    <pathelement path="etc/lib/hibernate-2.1/lib/odmg.jar"/>
			    <pathelement path="etc/lib/hibernate-2.1/lib/oscache.jar"/>
			    <pathelement path="etc/lib/hibernate-2.1/lib/proxool-0.8.3.jar"/>
				<pathelement path="etc/lib/hibernate-2.1/lib/swarmcache-1.0rc2.jar"/>
				
		
		<!-- compiled NeuroML libraries for HyperJaxb2 -->
		<pathelement path="${lib}/HyperJaxb2NeuroML-1.7.2.jar"/>

	</path>  
	
	<path id="hyperjaxb2.compile.path">
				<fileset dir="${lib}/hyperjaxb2/lib">
					<include name="jaxb-xjc-*.jar"/>
					<include name="jaxb-impl-*.jar"/>
					<include name="isorelax-*.jar"/>
					<include name="jaxb-api-*.jar"/>
					<include name="jaxb-libs-*.jar"/>
					<include name="jaxp-api-*.jar"/>
					<include name="jaxp-ri-*.jar"/>
					<include name="relaxngDatatype-*.jar"/>
					<include name="xsdlib-*.jar"/>
					<include name="jaxbcommons-core-*.jar"/>
					<include name="jaxbcommons-shared-*.jar"/>
					<include name="jaxbcommons-testing-*.jar"/>
					<include name="spring-*.jar"/>
					<include name="hyperjaxb2-core-*.jar"/>
					<include name="hyperjaxb2-hibernate-configuration-*.jar"/>
					<include name="hyperjaxb2-hibernate-customizations-*.jar"/>
					<include name="hyperjaxb2-hibernate-mapping-*.jar"/>
					<include name="hyperjaxb2-shared-*.jar"/>
					<include name="hyperjaxb2-testing-*.jar"/>
					<include name="commons-lang-*.jar"/>
					<include name="commons-logging-*.jar"/>
					<include name="commons-beanutils-*.jar"/>
					<include name="log4j-*.jar"/>
					<include name="saxon-*.jar"/>
					<include name="saxon-dom-*.jar"/>
					<include name="hibernate-*.jar"/>
					<include name="junit-*.jar"/>
				</fileset>
			</path>
		<path id="hyperjaxb2.runtime.path">
			<path refid="hyperjaxb2.compile.path"/>
				<fileset dir="${basedir}/lib">
					<include name="antlr-*.jar"/>
					<include name="asm-*.jar"/>
					<include name="asm-attrs-*.jar"/>
					<include name="cglib-*.jar"/>
					<include name="ehcache-*.jar"/>
					<include name="jta-*.jar"/>
					<include name="hibernate-*.jar"/>
					<include name="dom4j-*.jar"/>
					<include name="commons-collections-*.jar"/>
					<include name="commons-io-*.jar"/>
					<include name="commons-lang-*.jar"/>
					<include name="jaxb-api-*.jar"/>
					<include name="jaxb-impl-*.jar"/>
					<include name="jaxp-api-*.jar"/>
					<include name="jaxp-ri-*.jar"/>
					<include name="isorelax-*.jar"/>
					<include name="jaxb-libs-*.jar"/>
					<include name="relaxngDatatype-*.jar"/>
					<include name="xsdlib-*.jar"/>
					<include name="jaxbcommons-shared-*.jar"/>
					<include name="jaxbcommons-testing-*.jar"/>
					<include name="hyperjaxb2-shared-*.jar"/>
					<include name="hyperjaxb2-testing-*.jar"/>
					<include name="commons-logging-*.jar"/>
					<include name="log4j-*.jar"/>
					<include name="hsqldb-*.jar"/>
					<include name="junit-*.jar"/>
				</fileset>
			</path>
	

	<!-- =================================================================== -->
	<!-- USAGE -->		
	<!-- Instructions for using the build file -->	
	<!-- =================================================================== -->
	<target name = "usage" depends = "init">    
		<echo message = ""/>
		<echo message = "Whole Brain Catalog build instructions"/>
		<echo message = "-------------------------------------------------------------"/>
		<echo message = ""/>
		<echo message = " available targets are:"/>
		<echo message = ""/>	
		<echo message = "   run      --> runs the whole brain catalog"/>
		<echo message = "   clean      --> cleans up all build related files and dirs"/>
		<echo message = "   compile    --> compiles the source code"/>
		<echo message = ""/>
		<echo message = "-------------------------------------------------------------"/>
		<echo message = ""/>  
	</target>

	
    <!-- 
       #  ********** Finding Protege Libraries. *************
       # 
       #  We are using an approach that allows developers to decide
       #  whether to hand copy the needed jars into the lib directory or
       #  to point them to a protege installation.
      -->
    <target name="checkCatalogHome">
      <condition property="catalog.home.set">
        <available file="${lib}/jme.jar" type="file"/>
      </condition>
    </target>
   
    <target name="useCatalogHome" depends="checkCatalogHome" 
            if="catalog.home.set">
      <echo message="Using Catalog Home = ${catalog.home} to find catalog jars"/>
      <property name="protege.lib" location="${catalog.home}/lib/protege-libs/protege.jar"/>
      <property name="looks.lib"   location="${catalog.home}/lib/protege-libs/looks-2.1.3.jar"/>
    </target>
    
    <target name="useLibDir" depends="checkCatalogHome" 
            unless="catalog.home.set">
       <echo message="Using lib dir to find catalog jars"/>
      <property name="protege.lib" value="${lib}/protege-libs/protege.jar"/>
      <property name="looks.lib" value="${lib}/lprotege-libs/ooks-2.1.3.jar"/>
    </target>


    <target name = "checkCatalogLibs" depends="useCatalogHome, useLibDir">
      <condition property="libs.found">
        <and>
          <available file="${protege.lib}" type = "file"/>
          <available file="${looks.lib}" type = "file"/>
        </and>
      </condition>
      <path id="classpath.compile">
        <pathelement location = "${protege.lib}"/>
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
        </fileset>
      </path>

    </target>

    <target name="checkCatalogLibsAndReport" depends="checkCatalogLibs"
            unless="libs.found">
      <echo message="Missing protege libraries.  You can either "/>
      <echo message="set the CATALOG_HOME environment variable to a"/>
      <echo message="protege installation directory where the"/>
      <echo message="appropriate plugins have been installed or copy the"/>
      <echo message="needed jars into the lib directory"/>
      <echo message="Use the -v option to find the missing jar"/>
      <fail message="build aborted."/>
    </target>
       

    <!-- ================================================================ -->
    <!-- Creates the timestamp                                            -->
    <!-- ================================================================ -->

  <target name="init.time" depends="checkCatalogLibsAndReport">
	  <tstamp>
         <format property="build.time" pattern="MM/dd/yyyy hh:mm aa"/>
      </tstamp>
    </target>


    <target name="init" depends="init.time">
        <mkdir dir="${build}"/>
        <mkdir dir="${classes}"/>
        <mkdir dir="${dist}"/>
    </target>

    <!-- ================================================================ -->
    <!-- Build the classpath                                              -->
    <!--                                                                  -->
    <!-- ================================================================ -->

    <!-- ================================================================ -->
    <!-- Clean up build directories -->
    <!-- ================================================================ -->

    <target name="clean" depends="init" 
            description="clean up all build related files and dirs">
        <delete dir="${build}"/>
    </target>


    <!-- ================================================================ -->
    <!-- Compile the source code                                          -->
    <!-- ================================================================ -->
    <target name="compile" depends="init,checkCatalogLibsAndReport" 
            description="compile the Java files" >
        <javac srcdir="${src}" destdir="${classes}"        	
               deprecation = "${deprecation}"
               debug = "${debug}"
	       source = "${source}"
               includeAntRuntime="false">
            <classpath refid="project.classpath"/>
          <!--  <compilerarg value="-Xlint:all"/> -->
        </javac>
    </target>


<!--
    <target name="jar" depends="compile" description="Create the protege-owl.jar file">
        <copy todir="${build}" file="${src}/META-INF/MANIFEST.MF" overwrite="true"/>
        <manifest file="${build}/MANIFEST.MF" 
                  mode = "update">
           <attribute name="Built-By" value = "${user.name}"/>
           <attribute name="Build-Date" value = "${build.time}"/>
        </manifest>
        <jar jarfile="${jarfile}"
             manifest="${build}/MANIFEST.MF">
          <fileset dir="${classes}"/>
          <fileset dir="${src}/">
            <include name="**/*.gif"/>
          </fileset>
          <fileset dir="${src}/">
            <include name="**/*.png"/>
          </fileset>
            <fileset dir="${src}/">
                <include name="**/*.db"/>
            </fileset>
        </jar>
    </target>

    <target name = "update" depends = "jar">
      <fail message = "The Protege Home variable must be set for an install">
         <condition>
            <not>
               <and>
                  <isset property="catalog.home.set"/>
               </and>
            </not>
         </condition>
      </fail>
      <copy file="${jarfile}"
            todir = "${catalog.home}/plugins/${owlplugin}"
            overwrite = "true"/>
   </target>
-->
	<target name="javadoc">
	  <javadoc
	           destdir="docs/api"
	           author="true"
	           version="true"
	           use="true"
	           windowtitle="Whole Brain Catalog API"
	  		   overview="src/overview.html">

	    <packageset dir="src" defaultexcludes="yes">
	      <include name="edu/ucsd/ccdb/ontomorph2/**"/>
	      <exclude name="edu/ucsd/ccdb/ontomorph2/misc/**"/>
	    </packageset>

	    <doctitle><![CDATA[<h1>Whole Brain Catalog</h1>]]></doctitle>
	    <bottom><![CDATA[<i>Copyright &#169; 2008 NCMIR. All Rights Reserved.</i>]]></bottom>
	    <!--<tag name="todo" scope="all" description="To do:"/>
	    <group title="Group 1 Packages" packages="com.dummy.test.a*"/>
	    <group title="Group 2 Packages" packages="com.dummy.test.b*:com.dummy.test.c*"/>
	    <link offline="true" href="http://java.sun.com/j2se/1.5.0/docs/api/" packagelistLoc="C:\tmp"/>
	    <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>-->
	  </javadoc>
	</target>

    <target name = "install">
      <fail message = "set the catalog.home variable to do an install">
         <condition>
            <not>
              <isset property="catalog.home.set"/>
            </not>
         </condition>
      </fail>
   </target>
	
	<target name="exportDatabaseSchema" depends="cleanDB">
		<!-- Hibernate Tools import -->
		<taskdef name="schemaexport"
			classname="org.hibernate.tool.hbm2ddl.SchemaExportTask"
			classpathref="project.classpath"/>
		
		<mkdir dir="db"/>

	    <schemaexport
			    properties="etc/hibernateTemp/target/classes/hibernate.properties"
			    quiet="yes"
			    text="no"
			    drop="no"
			    delimiter=";"
			    output="db/schema.sql">
			    <fileset dir="etc/hibernateTemp/target/classes">
			      <include name="**/*.hbm.xml"/>
			    </fileset>
		</schemaexport>
	</target>
	
	<!-- Start the HSQL DB server -->
	<target name="startCleanDB" description="Run HSQL database server with clean DB" depends="cleanDB">

	<java classname="org.hsqldb.Server"
	fork="yes"
	classpathref="project.classpath"
	failonerror="true">
	<arg value="-database.0"/>
	<arg value="file:db/db"/>
	</java>
	</target>
	
	<target name="cleanDB" description="blows away the current DB">
		<!-- Delete database files -->
		<delete dir="db"/>
	</target>
	
	<!-- Start the HSQL DB server -->
	<target name="startDB" description="Run HSQL database server">
		<java classname="org.hsqldb.Server"
		fork="yes"
		classpathref="project.classpath"
		failonerror="true">
		<arg value="-database.0"/>
		<arg value="file:db/db"/>
		<jvmarg value="-Xmx1000M"/>
		</java>
	</target>
	
	<!-- load the local semantic database -->
	<target name="loadSemanticDB" description="Load the local HSQL DB with a protege database containing the NIF ontology" depends="compile">
		<java classname="edu.ucsd.ccdb.ontomorph2.util.LocalSemanticRepositorySetup" fork="yes"
		classpathref="project.classpath">
			 <jvmarg value="-Xmx1000M"/>
		</java>
	</target>
	
	<!-- Start the HSQL DB browser tool -->
	<target name="dbmanager" description="Start HSQL DB manager">
	<java
	classname="org.hsqldb.util.DatabaseManagerSwing"
	fork="yes"
	classpathref="project.classpath"
	failonerror="true">
	<arg value="-url"/>
	<arg value="jdbc:hsqldb:hsql://localhost/"/>
	<arg value="-driver"/>
	<arg value="org.hsqldb.jdbcDriver"/>
	</java>
	</target>
	
	<target name="generateNeuroMLClasses-1.7-modified" >
		<!-- http://java.sun.com/webservices/docs/1.6/jaxb/ant.html -->
		<xjc destdir="src/" package="neuroml.generated" removeOldOutput="yes">
			  <schema  dir="etc/neuroml-schemas/1.7-modified/Level1" includes="NeuroML_Level1*.xsd"/>
			  <schema  dir="etc/neuroml-schemas/1.7-modified/Level2" includes="NeuroML_Level2*.xsd"/>
		</xjc>
	</target>
	
	<target name="generateNeuroMLClasses-1.7.2" >
			<!-- http://java.sun.com/webservices/docs/1.6/jaxb/ant.html -->
			<xjc destdir="src/" package="neuroml.generated" removeOldOutput="yes">
				  <schema  dir="etc/neuroml-schemas/1.7.2/Level3" includes="NeuroML_Level3*.xsd"/>
				  
				  <binding dir="etc/neuroml-schemas/1.7.2/" includes="neuroml-bindings.xjb"/>
				  
			</xjc>
	</target>
	
		<target name="generateNeuroMLClasses-1.7.2-hyperjaxb2">
			<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpathref="hyperjaxb2.compile.path"/>
			<mkdir dir="etc/hibernateTemp/target/generated-sources/xjc"/>
			<xjc target="etc/hibernateTemp/target/generated-sources/xjc" extension="true">
				<arg line="
					-Xequals
					-XhashCode
					-Xhyperjaxb2
					-Xhyperjaxb2-rt=RoundtripTest"/>
				<binding dir="etc/neuroml-schemas/1.7.2">
				 	<include name="neuroml-bindings.xjb"/>
				</binding>
				<schema dir="etc/neuroml-schemas/1.7.2/Level3">
				 	<include name="NeuroML_Level3_v1.7.2.xsd"/>
				</schema>
			</xjc>
		</target>
	
	<target name="compileGeneratedNeuroMLClasses-1.7.2-hyperjaxb2" depends="generateNeuroMLClasses-1.7.2-hyperjaxb2">
			<mkdir dir="etc/hibernateTemp/target/classes"/>
			<javac
				destdir="etc/hibernateTemp/target/classes" 
				srcdir="etc/hibernateTemp/target/generated-sources/xjc"
				classpathref="hyperjaxb2.compile.path">
			</javac>
			<copy todir="etc/hibernateTemp/target/classes">
				<fileset dir="etc/neuroml-schemas/1.7.2"/>
				<fileset dir="etc/hibernateTemp/target/generated-sources/xjc">
					<exclude name="**/*.java" />
				</fileset>
			</copy>
		</target>
		
		<target name="packageGeneratedNeuroMLClasses-1.7.2-hyperjaxb2" depends="compileGeneratedNeuroMLClasses-1.7.2-hyperjaxb2">
			<jar destfile="lib/HyperJaxb2NeuroML-1.7.2.jar"
				basedir="etc/hibernateTemp/target/classes"/> 
		</target>
	
	<target name="generateNeurolucidaClasses" >
			<!-- http://java.sun.com/webservices/docs/1.6/jaxb/ant.html -->
			<xjc destdir="src/" package="neurolucida.generated" removeOldOutput="yes">
				  <schema  dir="etc/neurolucida-xml" includes="neurolucida-xml.xsd"/>
				  <binding dir="etc/neurolucida-xml" includes="neurolucida-bindings.xjb"/>
			</xjc>
	</target>
	
	
    <!-- Run targets -->

	
    <target name="run" depends="checkCatalogLibsAndReport, install">
		 <echo message="Using Path = ${catalog.home} to find catalog classes"/>
        <java fork="true" dir="${catalog.home}" 
              classname="edu.ucsd.ccdb.ontomorph2.app.OntoMorph2">
        	<jvmarg value = "-Djava.library.path=${catalog.home}/lib" />
            <classpath refid="project.classpath"/>
        </java>
    </target>


	<!--
	   <target name="run.server" depends="install">
	        <java fork="true" dir="${catalog.home}" 
	              classname="edu.stanford.smi.protege.server.Server">
	        	<jvmarg value = "-Djava.rmi.server.codebase=file:${catalog.home}/protege.jar"/>
	            <classpath>
	                <pathelement path="${catalog.home}/protege.jar"/>
	                <pathelement path="${catalog.home}/looks-2.1.3.jar"/>
	                <pathelement path="${catalog.home}/unicode_panel.jar"/>
	                <pathelement path="${catalog.home}/plugins/edu.stanford.smi.protegex.changes/change-model.jar"/>
	                <fileset dir="./dbdrivers"/>
	            </classpath>
	        	<arg value="examples/server/metaproject.pprj"/>
	        </java>
	    </target>
	
    <target name = "junit-compile" depends = "jar">
       <javac srcdir = "${junit}" destdir = "${classes}" debug = "on" 
              includeAntRuntime="false">
         <classpath refid = "classpath.compile"/>
         <classpath>
            <pathelement location = "${jarfile}"/>
         </classpath>
      </javac>
      <copy todir = "${build}/junit/projects">
        <fileset dir="${junit}/projects"/>
      </copy>
      <copy file = "junit.properties" todir = "${build}"/>
   </target>

  <target name = "checkJunitConfiguration" depends = "junit-compile">
    <java classname = "edu.stanford.smi.protegex.owl.junit_config.CheckConfiguration"
          dir="${build}" fork="true">
      <classpath>
        <pathelement location="${classes}"/>
        <pathelement location = "${protege.lib}"/>
        <pathelement location = "${looks.lib}"/>
        <pathelement location = "${lib}/junit.jar"/>
      </classpath>
    </java>
  </target>

  <target name="junitOntologies">
    <copy todir="${build}/examples">
      <fileset dir="./examples"/>
    </copy>
  </target>
  -->

   <!--
     My experience is that "ant junit" provides almost no debugging
     information when things go wrong.  (This was not true in my
     previous job and I don't know the difference. log4j??)  When there is a
     problem I generally use my development environment to debug
     faulting junit.  For scripting problems with the junits the options

        filtertrace="false" 
        showoutput="true"

     give a little more information.  Also when you know that some
     junits are failing, removing the option 

        haltonfailure = "on" 
        haltonerror   = "on"

     is helpful for showing all the failures.  But in the committed
     version I think that this option is very important because it
     means that the developer will never mistakenly believe that
     junits have succeeded.
       -->
	<!--
   <target name = "junit" 
           description = "run the tests (anybody can do it)"
           depends = "plugin.dir,junit-compile,checkJunitConfiguration, junitOntologies">
     <property file="junit.properties"/>
     <junit printsummary="withOutAndErr"
            dir = "${build}" 
            fork = "yes"
            filtertrace="${junit.filtertrace}"
            showoutput="${junit.showoutput}"
            haltonfailure = "${junit.haltonfailure}"
            haltonerror = "${junit.haltonerror}">
      <jvmarg value="-Xmx${junit.memory}"/>
      <jvmarg value="-Djunit.server.protege.jar=${protege.lib}"/>
      <classpath>
           <pathelement location="${classes}"/>
           <pathelement location = "${protege.lib}"/>
           <pathelement location = "${looks.lib}"/>
           <fileset
              dir="${plugin}">
              <include name = "**/*.jar"/>
           </fileset>
           <fileset
              dir="dbdrivers">
              <include name = "**/*.jar"/>
           </fileset>
        </classpath>
        <batchtest>
           <fileset dir="${junit}">
             <include name = "${junit.includes}"/>
             <exclude name = "**/*Abstract*.java"/>
             <exclude name = "**/*FailedTestCase.java"/>
           </fileset>
        </batchtest>
     </junit>
   </target>
   -->

</project>
