package edu.ucsd.ccdb.ontomorph2.core.data;

import java.io.File;
import java.io.Serializable;
import java.net.URL;
import java.util.Iterator;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.morphml.metadata.schema.Curve;
import org.morphml.neuroml.schema.Level3Cell;
import org.morphml.neuroml.schema.Neuroml;
import org.morphml.neuroml.schema.XWBCSlide;
import org.morphml.neuroml.schema.XWBCTangible;
import org.morphml.neuroml.schema.impl.NeuromlImpl;

import edu.ucsd.ccdb.ontomorph2.util.Log;
import edu.ucsd.ccdb.ontomorph2.util.OMTException;



/** .
 * Wraps a database that stores all the information about current position/rotation/scale of objects.
 * Also keeps track of users, changes, layers, and user preferences.
 * @author Stephen D. Larson (slarson@ncmir.ucsd.edu)
 *
 */
public class DataRepository {

	static DataRepository repo = null;
	SessionFactory sFact = null;
	
	public static DataRepository getInstance() {
		if (repo == null) {
			repo = new DataRepository();
		}
		return repo;
	}
	
	protected DataRepository() 
	{
		 Configuration configuration = new Configuration().configure();
		 sFact = configuration.buildSessionFactory(); 
	}
	
	
	/**
	 * Persist this object to the database!
	 * @param o - should be of a class that has been generated by HyperJAXB
	 */
	public void saveFileToDB(Object o){
//		 Open the session
		final Session saveSession = sFact.openSession();
		final Transaction transaction = saveSession.beginTransaction();
		
//		 Save the unmarshalled object into the database
		saveSession.saveOrUpdate(o);
//		 Get the id
		final Serializable id = saveSession.getIdentifier(o);

		transaction.commit();
//		 Flush and close the session
		saveSession.flush();
		saveSession.close();	
	}
	
	
	
	
	public Object findCurve(String name)
	{
//		TODO: change Tangivle to some neuroML class
		Object objFound = null;
		final Session sesLoad = sFact.openSession();	//open connection to DB (SQL)
		
		Criteria search = sesLoad.createCriteria(Curve.class);
		List results = search.list();
		
		/**
		 * pull out all rows formt he db that correspond to the class in question
		 * and then look through them all and find matching name
		 */
		
		for (int i=0; i < results.size(); i++)
		{
			Curve consider =  (Curve) results.get(i);
			
		
			if (consider.getName() != null && consider.getName().equals(name))
			{
				objFound = consider;
				break;	//stop iterating through the rest
			}
		}
		
		return objFound;
	}
	
	public Neuroml loadScene() {
		final Session sesLoad = sFact.openSession();	//open connection to DB (SQL)
		
		Criteria search = sesLoad.createCriteria(Neuroml.class);
		List results = search.list();
		Neuroml scene = null;
		if (false)
		//if (!results.isEmpty())
		{
			scene = (Neuroml)results.get(0);	
		}
		else 
		{
			Log.warn("Did not find a scene in the DB.  Loading it from disk!");
			long tick = Log.tick();
			try {
				URL sceneURL = new File("saved_scene.xml").toURI().toURL();
				
				if (sceneURL != null) {
					JAXBContext context = JAXBContext.newInstance("org.morphml.neuroml.schema");
					//Create the unmarshaller
					final Unmarshaller unmarshaller = context.createUnmarshaller();
					//Unmarshall the XML
					scene = (NeuromlImpl)unmarshaller.unmarshal(new File(sceneURL.getFile()));
					
					//load the scene into the DB
					DataRepository.getInstance().saveFileToDB(scene);
				}
			Log.tock("Finished loading scene from disk and persisting it to the db!", tick);
			} catch (Exception e) {
				throw new OMTException("Problem loading scene from XML", e);
			}
		}
		sesLoad.flush();
		sesLoad.close();
		return scene;
	}
	
	public XWBCTangible loadTangible(Class type, String name)
	{
		XWBCTangible objFound = null;
		final Session sesLoad = sFact.openSession();	//open connection to DB (SQL)
		
		Criteria search = sesLoad.createCriteria(type);
		List results = search.list();
		
		/**
		 * pull out all rows formt he db that correspond to the class in question
		 * and then look through them all and find matching name
		 */
		
		for (int i=0; i < results.size(); i++)
		{
			XWBCTangible consider =  (XWBCTangible) results.get(i);
			if (consider.getName() != null && consider.getName().equals(name))
			{
				objFound = consider;
				break;	//stop iterating through the rest
			}
		}
		
		return objFound;
		
		
		
	}
	public Object findMorphMLByName(String name) {
//		 Open the session
		final Session loadSession = sFact.openSession();

		Object objFound = null;
		/*
		final Object loadedObject = 
			((org.hibernate.classic.Session) loadSession).find("from Cell as cell where cell.name = ?", 
					name, Hibernate.STRING);
					*/
		/*
		Query q = loadSession.createQuery("from Cell as cell where cell.name = " + name);
		Object o = q.list().get(0);
		*/
		
		
		/**
		 * pull out all rows formt he db that correspond to the class in question
		 * and then look through them all and find matching name
		 */
		Criteria crit = loadSession.createCriteria(Level3Cell.class);//.add(Expression.eq("name", name));
		List l = crit.list();
		for (int i = 0; i < l.size(); i++) {
			Level3Cell c = (Level3Cell)l.get(i);
			if (c.getName() != null && c.getName().equals(name)) {
				objFound = c;
			}
		}
		
//		 Close the session
		loadSession.close();
		
		return objFound;
		//return loadedObject;

	}

	public void delete(Object lookup) {
//		 Open the session
		final Session loadSession = sFact.openSession();
		loadSession.delete(lookup);
		loadSession.close();
	}
}
